<!--
   Copyright 2013 Bibliotheca Alexandrina

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->

<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	id="WebApp_ID" version="2.5">
	<display-name>WAMCP</display-name>
	<welcome-file-list>
		<welcome-file>
            index.jsp
        </welcome-file>
	</welcome-file-list>
	<servlet>
		<servlet-name>Faces Servlet</servlet-name>
		<servlet-class>javax.faces.webapp.FacesServlet</servlet-class>
		<load-on-startup>
			1
        </load-on-startup>
	</servlet>
	<context-param>
		<param-name>facelets.LIBRARIES</param-name>
		<param-value>
            /WEB-INF/FaceletsCustomTags.xml
        </param-value>
	</context-param>
	<context-param>
		<description>
            State saving method: 'client' or 'server' (=default). See JSF Specification 2.5.2
        </description>
		<param-name>javax.faces.STATE_SAVING_METHOD</param-name>
		<param-value>
            server
        </param-value>
	</context-param>
	<context-param>
		<param-name>javax.servlet.jsp.jstl.fmt.localizationContext</param-name>
		<param-value>
            resources.application
        </param-value>
	</context-param>
	<listener>
		<listener-class>com.sun.faces.config.ConfigureListener</listener-class>
	</listener>
	<listener>
		<listener-class>org.bibalex.sdxe.xsa.application.XSAContextListener</listener-class>
	</listener>
	<context-param>
		<param-name>javax.faces.DEFAULT_SUFFIX</param-name>
		<param-value>
            .xhtml
        </param-value>
	</context-param>
	<context-param>
		<description>
            To allow multiple windows for a single application. True doesn't work, maybe because of the use of spring session handling
        </description>
		<param-name>com.icesoft.faces.concurrentDOMViews</param-name>
		<param-value>
            false
        </param-value>
	</context-param>
	<context-param>
		<description>
            If false the request scope is extended to be equal to the session scope
        </description>
		<param-name>com.icesoft.faces.standardRequestScope</param-name>
		<param-value>
            true
        </param-value>
	</context-param>
	<context-param>
		<description>
            Turn on/off application-wide synchronous or asynchronous updates.	By default, ICEfaces runs in asynchronous update mode, which provides
            support for ICEfaces unique server-initiated rendering (Ajax Push) capabilities.
            However, many applications do not require the full capabilities provided
            by asynchronous update mode. In these cases, it is recommended that synchronous
            update mode be configured. BUT THE FILE UPLOAD NEEDS THE ASYNCH UPDATE!
        </description>
		<param-name>com.icesoft.faces.synchronousUpdate</param-name>
		<param-value>
            false
        </param-value>
	</context-param>
	<context-param>
		<param-name>com.icesoft.faces.uploadDirectory</param-name>
		<param-value>
            XML/Import
        </param-value>
	</context-param>
	<context-param>
		<param-name>com.icesoft.faces.uploadMaxFileSize</param-name>
		<param-value>
            4048576
        </param-value>
	</context-param>
	<context-param>
		<description>Redirect on Connection Lost
				When a connection is lost, ICEFaces can be configured to redirect the browser to a custom error page. This feature can be turned on application-wide using the ICEfaces context parameter, com.icesoft.faces.connectionLostRedirectURI.</description>
		<param-name>com.icesoft.faces.connectionLostRedirectURI</param-name>

		<param-value>/Welcome.iface</param-value>

	</context-param>


	<context-param>
		<description>If not specified, the default `Connection Lost' overlay will be rendered or if the status component is present, the `Connection Lost' icon. Redirect on Session Expiry
				When a user session expires, ICEFaces can be configured to redirect the browser to a specific page. This feature can be turned on application-wide using the ICEfaces context parameter, com.icesoft.faces.sessionExpiredRedirectURI.
	</description>
		<param-name>com.icesoft.faces.sessionExpiredRedirectURI</param-name>

		<param-value>/Welcome.iface</param-value>

	</context-param>
	<!-- <context-param> <param-name> com.icesoft.faces.localAddress </param-name> 
		<param-value> localhost </param-value> </context-param> <context-param> <param-name> 
		com.icesoft.faces.localPort </param-name> <param-value> 8080 </param-value> 
		</context-param> <context-param> <param-name> com.icesoft.faces.blockingRequestHandler 
		</param-name> <param-value> push-server </param-value> </context-param> -->
	<servlet>
		<servlet-name>Persistent Faces Servlet</servlet-name>
		<servlet-class>
			com.icesoft.faces.webapp.xmlhttp.PersistentFacesServlet</servlet-class>
		<load-on-startup>
			1
        </load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>Persistent Faces Servlet</servlet-name>
		<url-pattern>
            *.iface
        </url-pattern>
		<url-pattern>
            *.jspx
        </url-pattern>
		<url-pattern>
            /xmlhttp/*
        </url-pattern>
		<url-pattern>
            *.faces
        </url-pattern>
		<url-pattern>
            *.jsf
        </url-pattern>
		<url-pattern>
            /faces/*
        </url-pattern>
	</servlet-mapping>
	<servlet>
		<servlet-name>Blocking Servlet</servlet-name>
		<servlet-class>com.icesoft.faces.webapp.xmlhttp.BlockingServlet</servlet-class>
		<load-on-startup>
			1
        </load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>Blocking Servlet</servlet-name>
		<url-pattern>
            /block/*
        </url-pattern>
	</servlet-mapping>
	<servlet>
		<servlet-name>uploadServlet</servlet-name>
		<servlet-class>
			com.icesoft.faces.component.inputfile.FileUploadServlet</servlet-class>
		<load-on-startup>
			1
        </load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>uploadServlet</servlet-name>
		<url-pattern>
            /uploadHtml
        </url-pattern>
	</servlet-mapping>
	<listener>
		<listener-class>
			com.icesoft.faces.util.event.servlet.ContextEventRepeater</listener-class>
	</listener>
	<listener>
		<listener-class>com.sun.faces.application.WebappLifecycleListener</listener-class>
	</listener>

	<context-param>
		<description>
            If the app will be deployed with another app on the same server process
            that uses log4j
        </description>
		<param-name>webAppRootKey</param-name>
		<param-value>
            WAMCPRoot
        </param-value>
	</context-param>
	<listener>
		<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
	</listener>

	<!-- ************************************************** -->
	<!-- Spring Security -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>


	<listener>
		<listener-class>
			org.springframework.web.context.request.RequestContextListener</listener-class>
	</listener>

	<filter>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>

	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>
            /*
        </url-pattern>
		<dispatcher>REQUEST</dispatcher>
		<dispatcher>INCLUDE</dispatcher>
		<dispatcher>FORWARD</dispatcher>
	</filter-mapping>

	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
            /WEB-INF/classes/applicationContext-security.xml
            /WEB-INF/classes/applicationContext-workflow.xml
            /WEB-INF/classes/applicationContext-beans.xml
        </param-value>
	</context-param>




	<!-- END Spring security -->
	<!-- ******************************************************** -->
	<session-config>
		<session-timeout>60</session-timeout>
	</session-config>
</web-app>
